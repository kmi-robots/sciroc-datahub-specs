openapi: 3.0.0
info:
  description: DataHub SciRoc Competition Interface
  version: 0.1.0
  title: DataHub SciRoc Competition Interface
  termsOfService: http://datahub.mksmart.org
  contact:
    email: datahub-support@mksmart.org
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
tags:{
  "openapi": "3.0.0",
  "info": {
    "description": "DataHub SciRoc Competition Interface - Episode 12",
    "version": "0.1.0",
    "title": "DataHub SciRoc Competition Interface - Episode 12",
    "termsOfService": "http://datahub.mksmart.org",
    "contact": {
      "email": "datahub-support@mksmart.org"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "tags": [
    {
      "name": "Episode12",
      "description": "Episode 12: Fast delivery of emergency pills",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://datahub.mksmart.org"
      }
    }
  ],
  "paths": {
    "/{teamid}/sciroc-robot-status/{id}": {
      "put": {
        "tags": [
          "Episode12"
        ],
        "summary": "Adds a status info",
        "operationId": "createReplaceStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "RobotStatus ID to be retrieved (e.g. teamId-robotId-timestamp)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamid",
            "in": "path",
            "description": "Team ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RobotStatus"
              }
            }
          },
          "description": "Status object that needs to be created",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Status created"
          },
          "204": {
            "description": "Status replaced"
          },
          "405": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Internal error"
          }
        }
      },
      "post": {
        "tags": [
          "Episode12"
        ],
        "summary": "Adds a status info",
        "operationId": "updateStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "RobotStatus ID to be updated (e.g. teamId-robotId-timestamp)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamid",
            "in": "path",
            "description": "Team ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RobotStatus"
              }
            }
          },
          "description": "Status object that needs to be added",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Status updated"
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/{teamid}/sciroc-robot-location/{id}": {
      "put": {
        "tags": [
          "Episode12"
        ],
        "summary": "Set robot location",
        "operationId": "setRobotLocation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Robot location ID to be retrieved",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamid",
            "in": "path",
            "description": "Team ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RobotLocation"
              }
            }
          },
          "description": "Robot Location object that needs to be created/replaced",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Robot Location created"
          },
          "204": {
            "description": "Robot Location replaced"
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Internal error"
          }
        }
      },
      "post": {
        "tags": [
          "Episode12"
        ],
        "summary": "Set robot location",
        "operationId": "updateRobotLocation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Robot location ID to be retrieved",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamid",
            "in": "path",
            "description": "Team ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RobotLocation"
              }
            }
          },
          "description": "Robot Location object that needs to be added",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Robot Location updated"
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/master/sciroc-episode12-patient": {
      "get": {
        "tags": [
          "Episode12"
        ],
        "summary": "List of patients",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "Query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Patient"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid query"
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/master/sciroc-episode12-patient/{id}": {
      "get": {
        "tags": [
          "Episode12"
        ],
        "summary": "Gets patient info",
        "operationId": "getPatient",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Patient ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Patient"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/{teamid}/sciroc-episode12-image": {
      "get": {
        "tags": [
          "Episode12"
        ],
        "summary": "List of image reports",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "Query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamid",
            "in": "path",
            "description": "Team ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ImageReport"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid query"
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/{teamid}/sciroc-episode12-image/{id}": {
      "get": {
        "tags": [
          "Episode12"
        ],
        "summary": "Gets image",
        "operationId": "getImageReport",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Image ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamid",
            "in": "path",
            "description": "Team ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageReport"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal error"
          }
        }
      },
      "put": {
        "tags": [
          "Episode12"
        ],
        "summary": "Add image report",
        "operationId": "setImageReport",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Image ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamid",
            "in": "path",
            "description": "Team ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImageReport"
              }
            }
          },
          "description": "ImageReport that needs to be added or updated",
          "required": true
        },
        "responses": {
          "201": {
            "description": "ImageReport created"
          },
          "204": {
            "description": "ImageReport replaced"
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Internal error"
          }
        }
      },
      "post": {
        "tags": [
          "Episode12"
        ],
        "summary": "Update image report",
        "operationId": "updateImageReport",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Image ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamid",
            "in": "path",
            "description": "Team ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImageReport"
              }
            }
          },
          "description": "ImageReport that needs to be updated",
          "required": true
        },
        "responses": {
          "204": {
            "description": "ImageReport updated"
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about the SciRoc competition",
    "url": "http://sciroc.org/datahub"
  },
  "servers": [
    {
      "url": "https://api.pp.mksmart.org/sciroc-competition/"
    }
  ],
  "security": [
    {
      "scirocAuth": []
    }
  ],
  "components": {
    "securitySchemes": {
      "scirocAuth": {
        "type": "http",
        "scheme": "basic"
      }
    },
    "schemas": {
      "RobotStatus": {
        "type": "object",
        "required": [
          "@id",
          "@type",
          "message",
          "team",
          "episode",
          "timestamp",
          "x",
          "y",
          "z"
        ],
        "properties": {
          "@id": {
            "type": "string"
          },
          "@type": {
            "type": "string",
            "enum": [
              "RobotStatus"
            ]
          },
          "message": {
            "type": "string",
            "maxLength": 30
          },
          "episode": {
            "type": "string"
          },
          "team": {
            "type": "string"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "x": {
            "type": "number"
          },
          "y": {
            "type": "number"
          },
          "z": {
            "type": "number"
          }
        }
      },
      "RobotLocation": {
        "type": "object",
        "required": [
          "@id",
          "@type",
          "team",
          "episode",
          "timestamp",
          "location"
        ],
        "properties": {
          "@id": {
            "type": "string"
          },
          "@type": {
            "type": "string",
            "enum": [
              "RobotLocation"
            ]
          },
          "episode": {
            "type": "string"
          },
          "team": {
            "type": "string"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "x": {
            "type": "number"
          },
          "y": {
            "type": "number"
          },
          "z": {
            "type": "number"
          }
        }
      },
      "Patient": {
        "type": "object",
        "required": [
          "@id",
          "@type",
          "x",
          "y",
          "z"
        ],
        "properties": {
          "@id": {
            "type": "string"
          },
          "@type": {
            "type": "string",
            "enum": [
              "Patient"
            ]
          },
          "x": {
            "type": "number"
          },
          "y": {
            "type": "number"
          },
          "z": {
            "type": "number"
          }
        }
      },
      "ImageReport": {
        "type": "object",
        "required": [
          "@id",
          "@type",
          "team",
          "timestamp",
          "x",
          "y",
          "z",
          "base64",
          "format"
        ],
        "properties": {
          "@id": {
            "type": "string"
          },
          "@type": {
            "type": "string",
            "enum": [
              "ImageReport"
            ]
          },
          "team": {
            "type": "string"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "x": {
            "type": "number"
          },
          "y": {
            "type": "number"
          },
          "z": {
            "type": "number"
          },
          "base64": {
            "type": "string"
          },
          "format": {
            "type": "string",
            "enum": [
              "image/jpeg",
              "image/png",
              "image/bmp"
            ]
          }
        }
      }
    }
  }
}
  - name: Monitor
    description: Everything about the SciRoc Monitor
    externalDocs:
      description: Find out more
      url: http://datahub.mksmart.org
  - name: Episode3
    description: "Episode 3: Coffee shop delivery"
    externalDocs:
      description: Find out more
      url: http://datahub.mksmart.org
  - name: Episode4
    description: "Episode 4: Take the elevator"
    externalDocs:
      description: Find out more
      url: http://datahub.mksmart.org
  - name: Episode7
    description: "Episode 7: Goodies box collector"
    externalDocs:
      description: Find out more
      url: http://datahub.mksmart.org
  - name: Episode10
    description: "Episode 10: Open the door"
    externalDocs:
      description: Find out more
      url: http://datahub.mksmart.org
  - name: Episode12
    description: "Episode 12: Fast delivery of emergency pills"
    externalDocs:
      description: Find out more
      url: http://datahub.mksmart.org
paths:
  /{teamid}/sciroc-episode:
    get:
      tags:
        - Monitor
      summary: Gets the list of episodes
      parameters:
        - name: query
          in: query
          description: Query
          required: false
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Episode"
        "400":
          description: Bad request
        "500":
          description: Internal error
  /{teamid}/sciroc-episode/{id}:
    get:
      tags:
        - Monitor
      summary: Gets the a episode
      operationId: getEpisode
      parameters:
        - name: id
          in: path
          description: Episode ID to be retrieved
          required: true
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Episode"
        "400": 
          description: "Bad request"
        "404":
          description: "Object not found"
        "500":
          description: Internal error
    put:
      tags:
        - Monitor
      summary: Creates an episode
      operationId: createEpisode
      parameters:
        - name: id
          in: path
          description: Episode ID
          required: true
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Episode"
        description: Episode object that needs to be added
        required: true
      responses:
        "201":
          description: Episode created
        "204":
          description: Episode replaced
        "400":
          description: Bad request
        "500":
          description: Internal error
    post:
      tags:
        - Monitor
      summary: Updates an episode
      operationId: updateEpisode
      parameters:
        - name: id
          in: path
          description: Episode ID to be updated
          required: true
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Episode"
        description: Episode object that needs to be updated
        required: true
      responses:
        "204":
          description: Episode updated
        "400": 
          description: "Bad request"
        "404":
          description: "Object not found"
        "500":
          description: Internal error
    delete:
      tags:
        - Monitor
      summary: Delete an episode
      operationId: deleteEpisode
      parameters:
        - name: id
          in: path
          description: Episode ID to be deleted
          required: true
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Episode deleted
        "400": 
          description: "Bad request"
        "404":
          description: "Object not found"
        "500":
          description: Internal error
  /{teamid}/sciroc-team:
    get:
      tags:
        - Monitor
      summary: Gets the list of teams
      parameters:
        - name: query
          in: query
          description: Query
          required: false
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Team"
        "400": 
          description: "Bad request"
        "500":
          description: Internal error
  /{teamid}/sciroc-team/{id}:
    get:
      tags:
        - Monitor
      summary: Gets a team
      operationId: getTeam
      parameters:
        - name: id
          in: path
          description: Team ID to be retrieved
          required: true
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Team"
        "400": 
          description: "Bad request"
        "404":
          description: "Object not found"
        "500":
          description: Internal error
    put:
      tags:
        - Monitor
      summary: Creates a team
      operationId: createTeam
      parameters:
        - name: id
          in: path
          description: Team ID to be created
          required: true
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Team"
        description: Team object that needs to be added
        required: true
      responses:
        "201":
          description: Team created
        "204":
          description: Team replaced
        "400":
          description: Invalid input
        "500":
          description: Internal error          
    post:
      tags:
        - Monitor
      summary: Creates or updates a team
      operationId: updateTeam
      parameters:
        - name: id
          in: path
          description: Team ID to be retrieved
          required: true
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Team"
        description: Team object that needs to be updated
        required: true
      responses:
        "204":
          description: Team updated
        "400":
          description: Invalid input
        "500":
          description: Internal error
    delete:
      tags:
        - Monitor
      summary: Delete a team
      operationId: deleteTeam
      parameters:
        - name: id
          in: path
          description: Team ID to be deleted
          required: true
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Team deleted
        "400": 
          description: "Bad request"
        "404":
          description: "Object not found"
        "500":
          description: Internal error
  /{teamid}/sciroc-event:
    get:
      tags:
        - Monitor
      summary: Gets the schedule (list of events)
      parameters:
        - name: query
          in: query
          description: Query
          required: false
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Event"
        "400": 
          description: "Bad request"
        "500":
          description: Internal error
  /{teamid}/sciroc-event/{id}:
    get:
      tags:
        - Monitor
      summary: Gets an event
      operationId: getEvent
      parameters:
        - name: id
          in: path
          description: Event ID
          required: true
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
        "500":
          description: Internal error
    put:
      tags:
        - Monitor
      summary: Creates an event in the schedule
      operationId: createEvent
      parameters:
        - name: id
          in: path
          description: Event ID
          required: true
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Event"
        description: Event object that needs to be added to the schedule
        required: true
      responses:
        "201":
          description: Event created
        "204":
          description: Event replaced
        "400": 
          description: "Bad request"
        "404":
          description: "Object not found"
        "500":
          description: Internal error
    post:
      tags:
        - Monitor
      summary: Updates an event in the schedule
      operationId: updateEvent
      parameters:
        - name: id
          in: path
          description: Event ID
          required: true
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Event"
        description: Event object that needs to be updated
        required: true
      responses:
        "204":
          description: Event updated
        "400": 
          description: "Bad request"
        "404":
          description: "Object not found"
        "500":
          description: Internal error
    delete:
      tags:
        - Monitor
      summary: Delete an event in the schedule
      operationId: deleteEvent
      parameters:
        - name: id
          in: path
          description: Event ID to be deleted
          required: true
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Event deleted
        "400": 
          description: "Bad request"
        "404":
          description: "Object not found"
        "500":
          description: Internal error
  /{teamid}/sciroc-trials:
    get:
      tags:
        - Monitor
      summary: List of trials
      parameters:
        - name: query
          in: query
          description: Query
          required: false
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Trial"
        "400": 
          description: "Bad request"
        "404":
          description: "Object not found"
        "500":
          description: Internal error
  /{teamid}/sciroc-trial/{id}:
    get:
      tags:
        - Monitor
      summary: Gets a trial
      operationId: getTrial
      parameters:
        - name: id
          in: path
          description: Trial ID
          required: true
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Trial"
        "400": 
          description: "Bad request"
        "404":
          description: "Object not found"
        "500":
          description: Internal error
    put:
      tags:
        - Monitor
      summary: Creates or replaces a trial info
      operationId: createTrial
      parameters:
        - name: id
          in: path
          description: Trial ID
          required: true
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Trial"
        description: Trial object that needs to be added
        required: true
      responses:
        "201":
          description: Trial info created
        "400": 
          description: "Bad request"
        "404":
          description: "Object not found"
        "500":
          description: Internal error
    post:
      tags:
        - Monitor
      summary: Updates a trial info
      operationId: updateTrial
      parameters:
        - name: id
          in: path
          description: Trial ID
          required: true
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Trial"
        description: Trial object that needs to be updated
        required: true
      responses:
        "204":
          description: Trial info updated
        "400": 
          description: "Bad request"
        "404":
          description: "Object not found"
        "500":
          description: Internal error
    delete:
      tags:
        - Monitor
      summary: Delete trial info
      operationId: deleteTrial
      parameters:
        - name: id
          in: path
          description: Trial info ID to be deleted
          required: true
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Trial deleted
        "400": 
          description: "Bad request"
        "404":
          description: "Object not found"
        "500":
          description: Internal error
  /{teamid}/sciroc-judgement:
    get:
      tags:
        - Monitor
      summary: List of judgements, optionally filtered by episode or team
      parameters:
        - name: query
          in: query
          description: Query
          required: false
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Judgement"
        "400": 
          description: "Bad request"
        "404":
          description: "Object not found"
        "500":
          description: Internal error
  /{teamid}/sciroc-judgement/{id}:
    get:
      tags:
        - Monitor
      summary: Gets a judgement
      operationId: getJudgement
      parameters:
        - name: id
          in: path
          description: Judgement ID
          required: true
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Judgement"
        "400": 
          description: "Bad request"
        "404":
          description: "Object not found"
        "500":
          description: Internal error
    put:
      tags:
        - Monitor
      summary: Creates or updates a judgement
      operationId: createJudgement
      parameters:
        - name: id
          in: path
          description: Judgement ID
          required: true
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Judgement"
        description: Judgement object that needs to be added/replaced
        required: true
      responses:
        "201":
          description: Judgement created
        "400": 
          description: "Bad request"
        "404":
          description: "Object not found"
        "500":
          description: Internal error
    post:
      tags:
        - Monitor
      summary: Updates a judgement
      operationId: updateJudgement
      parameters:
        - name: id
          in: path
          description: Judgement ID
          required: true
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Judgement"
        description: Judgement object that needs to be updated
        required: true
      responses:
        "204":
          description: Judgement updated
        "400": 
          description: "Bad request"
        "404":
          description: "Object not found"
        "500":
          description: Internal error          
    delete:
      tags:
        - Monitor
      summary: Delete Judgement
      operationId: deleteJudgement
      parameters:
        - name: id
          in: path
          description: Judgement ID
          required: true
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Judgement deleted
        "400": 
          description: "Bad request"
        "404":
          description: "Object not found"
        "500":
          description: Internal error
  /{teamid}/sciroc-robot-status:
    get:
      tags:
        - Monitor
      summary: List of robots status
      parameters:
        - name: query
          in: query
          description: Query
          required: false
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RobotStatus"
        "400":
          description: Bad request
        "500":
          description: Internal error
  /{teamid}/sciroc-robot-status/{id}:
    get:
      tags:
        - Monitor
      summary: Gets a robot status
      operationId: getRobotStatus
      parameters:
        - name: id
          in: path
          description: RobotStatus ID to be retrieved (e.g. teamId-robotId-timestamp)
          required: true
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RobotStatus"
        "400":
          description: Bad request
        "404":
          description: Not found
        "500":
          description: Internal error
    put:
      tags:
        - Monitor
        - Episode3
        - Episode4
        - Episode7
        - Episode10
        - Episode12
      summary: Adds a status info
      operationId: createReplaceStatus
      parameters:
        - name: id
          in: path
          description: RobotStatus ID to be retrieved (e.g. teamId-robotId-timestamp)
          required: true
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RobotStatus"
        description: Status object that needs to be created
        required: true
      responses:
        "204":
          description: Status replaced
        "201":
          description: Status created
        "405":
          description: Invalid input
        "500":
          description: Internal error
    post:
      tags:
        - Monitor
        - Episode3
        - Episode4
        - Episode7
        - Episode10
        - Episode12
      summary: Adds a status info
      operationId: updateStatus
      parameters:
        - name: id
          in: path
          description: RobotStatus ID to be updated (e.g. teamId-robotId-timestamp)
          required: true
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RobotStatus"
        description: Status object that needs to be added
        required: true
      responses:
        "204":
          description: Status updated
        "400":
          description: Bad request
        "404":
          description: Not found
        "500":
          description: Internal error
    delete:
      tags:
        - Monitor
      summary: Delete status info
      operationId: deleteRobotStatus
      parameters:
        - name: id
          in: path
          description: Robot status ID to be deleted
          required: true
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Robot status deleted
        "400":
          description: Bad request
        "404":
          description: Not found
        "500":
          description: Internal error
  /{teamid}/sciroc-robot-location:
    get:
      tags:
        - Monitor
      summary: Last reported robot locations
      parameters:
        - name: query
          in: query
          description: Query
          required: false
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RobotLocation"
        "400":
          description: "Bad request"
        "500":
          description: Internal error
  /{teamid}/sciroc-robot-location/{id}:
    get:
      tags:
        - Monitor
      summary: Gets a robot location
      operationId: getRobotLocation
      parameters:
        - name: id
          in: path
          description: Robot location ID to be retrieved
          required: true
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RobotLocation"
        "400":
          description: Bad request
        "404":
          description: Not found
        "500":
          description: Internal error
    put:
      tags:
        - Monitor
        - Episode3
        - Episode4
        - Episode7
        - Episode10
        - Episode12
      summary: Set robot location
      operationId: setRobotLocation
      parameters:
        - name: id
          in: path
          description: Robot location ID to be retrieved
          required: true
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RobotLocation"
        description: Robot Location object that needs to be created/replaced
        required: true
      responses:
        "204":
          description: Robot Location replaced
        "201":
          description: Robot Location created
        "400":
          description: Invalid input
        "500":
          description: Internal error
    post:
      tags:
        - Monitor
        - Episode3
        - Episode4
        - Episode7
        - Episode10
        - Episode12
      summary: Set robot location
      operationId: updateRobotLocation
      parameters:
        - name: id
          in: path
          description: Robot location ID to be retrieved
          required: true
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RobotLocation"
        description: Robot Location object that needs to be added
        required: true
      responses:
        "204":
          description: Robot Location updated
        "400":
          description: Invalid input
        "500":
          description: Internal error          
    delete:
      tags:
        - Monitor
      summary: Delete robot location
      operationId: deleteRobotLocation
      parameters:
        - name: id
          in: path
          description: Robot location ID to be deleted
          required: true
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Robot location deleted
        "400":
          description: Bad request
        "404":
          description: "Invalid input: Robot location ID does not exists"
        "500":
          description: Internal error
  /{teamid}/sciroc-episode3-menu:
    get:
      tags:
        - Episode3
      summary: Coffee Shop Menu
      parameters:
        - name: query
          in: query
          description: Query
          required: false
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Menu"
        "400":
          description: "Invalid input"
        "500":
          description: Internal error
  /{teamid}/sciroc-episode3-menu/{id}:
    get:
      tags:
        - Episode3
      summary: Gets a menu
      operationId: getMenu
      parameters:
        - name: id
          in: path
          description: Menu ID
          required: true
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Menu"
        "400":
          description: Invalid input
        "404":
          description: Not found
        "500":
          description: Internal error
    put:
      tags:
        - Episode3
      summary: Set menu
      operationId: setMenu
      parameters:
        - name: id
          in: path
          description: Menu ID
          required: true
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Menu"
        description: Robot Location object that needs to be created/replaced
        required: true
      responses:
        "201":
          description: Menu created
        "204":
          description: Menu replaced
        "400":
          description: Invalid input
        "500":
          description: Internal error
    post:
      tags:
        - Episode3
      summary: Update menu
      operationId: updateMenu
      parameters:
        - name: id
          in: path
          description: Menu ID
          required: true
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Menu"
        description: Robot Location object that needs to be updated
        required: true
      responses:
        "204":
          description: Menu updated
        "400":
          description: Invalid input
        "404":
          description: Not found
        "500":
          description: Internal error
    delete:
      tags:
        - Episode3
      summary: Menu location
      operationId: deleteMenu
      parameters:
        - name: id
          in: path
          description: Menu ID to be deleted
          required: true
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Menu deleted
        "404":
          description: "Not found"
        "400":
          description: "Bad request"
        "500":
          description: Internal error
  /{teamid}/sciroc-episode3-table:
    get:
      tags:
        - Episode3
      summary: Coffee Shop Table
      parameters:
        - name: query
          in: query
          description: Query
          required: false
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Table"
        "400":
          description: Invalid input
        "500":
          description: Internal error
  /{teamid}/sciroc-episode3-table/{id}:
    get:
      tags:
        - Episode3
      summary: Gets a table
      operationId: getTable
      parameters:
        - name: id
          in: path
          description: Table ID
          required: true
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Table"
        "404":
          description: Not found
        "400":
          description: Bad request
        "500":
          description: Internal error
    put:
      tags:
        - Episode3
      summary: Set table
      operationId: setTable
      parameters:
        - name: id
          in: path
          description: Table ID
          required: true
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Table"
        description: Table that needs to be created or replaced
        required: true
      responses:
        "201":
          description: Table created
        "204":
          description: Table updated
        "400":
          description: Invalid input
        "500":
          description: Internal error
    post:
      tags:
        - Episode3
      summary: Set table
      operationId: updateTable
      parameters:
        - name: id
          in: path
          description: Table ID
          required: true
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Table"
        description: Table that needs to be updated
        required: true
      responses:
        "204":
          description: Table updated
        "400":
          description: Invalid input
        "404":
          description: Not found
        "500":
          description: Internal error
    delete:
      tags:
        - Episode3
      summary: Table
      operationId: deleteTable
      parameters:
        - name: id
          in: path
          description: Table ID to be deleted
          required: true
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Table deleted
        "405":
          description: "Invalid input: Table ID does not exists"
        "500":
          description: Internal error
  /{teamid}/sciroc-episode3-order:
    get:
      tags:
        - Episode3
      summary: Coffee Shop Order
      parameters:
        - name: query
          in: query
          description: Query
          required: false
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
        "400":
          description: "Invalid input"
        "500":
          description: Internal error
  /{teamid}/sciroc-episode3-order/{id}:
    get:
      tags:
        - Episode3
      summary: Gets a order
      operationId: getOrder
      parameters:
        - name: id
          in: path
          description: Order ID
          required: true
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "404":
          description: Not found
        "500":
          description: Internal error
    put:
      tags:
        - Episode3
      summary: Set order
      operationId: setOrder
      parameters:
        - name: id
          in: path
          description: Order ID
          required: true
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
        description: Order that needs to be created or replaced
        required: true
      responses:
        "201":
          description: Menu created
        "204":
          description: Menu replaced
        "400":
          description: Bad request
        "500":
          description: Internal error
    post:
      tags:
        - Episode3
      summary: Set order
      operationId: updateOrder
      parameters:
        - name: id
          in: path
          description: Order ID
          required: true
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
        description: Order that needs to be updated
        required: true
      responses:
        "204":
          description: Menu updated
        "400":
          description: Invalid input
        "404":
          description: Not found
        "500":
          description: Internal error
    delete:
      tags:
        - Episode3
      summary: Order
      operationId: deleteOrder
      parameters:
        - name: id
          in: path
          description: Order ID to be deleted
          required: true
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Order deleted
        "400":
          description: Bad request
        "404":
          description: "Invalid input: Order ID does not exists"
        "500":
          description: Internal error
  /{teamid}/sciroc-episode4-shop:
    get:
      tags:
        - Episode4
      summary: Shop info list
      parameters:
        - name: query
          in: query
          description: Query
          required: false
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Shop"
        "400":
          description: "Invalid input"
        "500":
          description: Internal error
  /{teamid}/sciroc-episode4-shop/{id}:
    get:
      tags:
        - Episode4
      summary: Gets a shop info
      operationId: getShop
      parameters:
        - name: id
          in: path
          description: Shop ID
          required: true
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Shop"
        "404":
          description: Not found
        "400":
          description: Bad request
        "500":
          description: Internal error
    put:
      tags:
        - Episode4
      summary: Set shop
      operationId: setShop
      parameters:
        - name: id
          in: path
          description: Shop ID
          required: true
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Shop"
        description: Shop info that needs to be added
        required: true
      responses:
        "201":
          description: Shop created
        "204":
          description: Shop updated
        "400":
          description: Invalid input
        "500":
          description: Internal error
    post:
      tags:
        - Episode4
      summary: Set shop
      operationId: updateShop
      parameters:
        - name: id
          in: path
          description: Shop ID
          required: true
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Shop"
        description: Shop info that needs to be added
        required: true
      responses:
        "204":
          description: Shop updated
        "400":
          description: Invalid input
        "404":
          description: Not found
        "500":
          description: Internal error
    delete:
      tags:
        - Episode4
      summary: Delete Shop info
      operationId: deleteShop
      parameters:
        - name: id
          in: path
          description: Shop ID to be deleted
          required: true
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Shop deleted
        "404":
          description: Not found
        "400":
          description: "Invalid input"
        "500":
          description: Internal error
  /{teamid}/sciroc-episode7-inventory-item:
    get:
      tags:
        - Episode7
      summary: List of inventory items
      parameters:
        - name: query
          in: query
          description: Query
          required: false
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/InventoryItem"
        "400":
          description: "Invalid input"
        "500":
          description: Internal error
  /{teamid}/sciroc-episode7-inventory-item/{id}:
    get:
      tags:
        - Episode7
      summary: Gets a shop info
      operationId: getInventoryItem
      parameters:
        - name: id
          in: path
          description: InventoryItem ID
          required: true
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InventoryItem"
        "400":
          description: Bad request
        "500":
          description: Internal error
    put:
      tags:
        - Episode7
      summary: Set shop
      operationId: setInventoryItem
      parameters:
        - name: id
          in: path
          description: Inventory Item ID
          required: true
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InventoryItem"
        description: InventoryItem that needs to be created or replaced
        required: true
      responses:
        "201":
          description: InventoryItem created
        "204":
          description: InventoryItem replaced
        "400":
          description: Invalid input
        "500":
          description: Internal error
    post:
      tags:
        - Episode7
      summary: Set shop
      operationId: updateInventoryItem
      parameters:
        - name: id
          in: path
          description: Inventory Item ID
          required: true
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InventoryItem"
        description: InventoryItem that needs to be updated
        required: true
      responses:
        "204":
          description: InventoryItem updated
        "400":
          description: Invalid input
        "404":
          description: Not found
        "500":
          description: Internal error
    delete:
      tags:
        - Episode7
      summary: Delete InventoryItem
      operationId: deleteInventoryItem
      parameters:
        - name: id
          in: path
          description: Inventory Item ID
          required: true
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      responses:
        "204":
          description: InventoryItem deleted
        "400":
          description: "Invalid input"
        "404":
          description:  Not found
        "500":
          description: Internal error
  /{teamid}/sciroc-episode7-inventory-order:
    get:
      tags:
        - Episode7
      summary: List of inventory orders
      parameters:
        - name: query
          in: query
          description: Query
          required: false
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/InventoryOrder"
        "400":
          description: "Invalid query"
        "500":
          description: Internal error
  /{teamid}/sciroc-episode7-inventory-order/{id}:
    get:
      tags:
        - Episode7
      summary: Gets order info
      operationId: getInventoryOrder
      parameters:
        - name: id
          in: path
          description: InventoryOrder ID
          required: true
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InventoryOrder"
        "404": 
          description: Not found
        "500":
          description: Internal error
    put:
      tags:
        - Episode7
      summary: Set inventory order
      operationId: setInventoryOrder
      parameters:
        - name: id
          in: path
          description: Inventory Order ID
          required: true
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string

      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InventoryOrder"
        description: InventoryOrder that needs to be added or replaced
        required: true
      responses:
        "201":
          description: InventoryOrder created
        "204":
          description: InventoryOrder replaced
        "400":
          description: Invalid input
        "500":
          description: Internal error
    post:
      tags:
        - Episode7
      summary: Set inventory order
      operationId: updateInventoryOrder
      parameters:
        - name: id
          in: path
          description: Inventory Order ID
          required: true
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InventoryOrder"
        description: InventoryOrder that needs to be updated
        required: true
      responses:
        "204":
          description: InventoryOrder updated
        "400":
          description: Invalid input
        "404":
          description: Not found
        "500":
          description: Internal error
    delete:
      tags:
        - Episode7
      summary: Delete InventoryOrder
      operationId: deleteInventoryOrder
      parameters:
        - name: id
          in: path
          description: InventoryOrder ID to be deleted
          required: true
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      responses:
        "204":
          description: InventoryOrder deleted
        "405":
          description: "Invalid input: InventoryOrder ID does not exists"
        "500":
          description: Internal error
  /{teamid}/sciroc-episode12-patient:
    get:
      tags:
        - Episode12
      summary: List of patients
      parameters:
        - name: query
          in: query
          description: Query
          required: false
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Patient"
        "400":
          description: "Invalid query"
        "500":
          description: Internal error
  /{teamid}/sciroc-episode12-patient/{id}:
    get:
      tags:
        - Episode12
      summary: Gets patient info
      operationId: getPatient
      parameters:
        - name: id
          in: path
          description: Patient ID
          required: true
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Patient"
        "404":
          description: "Not found"
        "500":
          description: Internal error
    put:
      tags:
        - Episode12
      summary: Set inventory order
      operationId: setPatient
      parameters:
        - name: id
          in: path
          description: Patient ID
          required: true
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Patient"
                - type: object
                  required:
                    - "@id"
        description: InventoryOrder that needs to be created or replaced
        required: true
      responses:
        "201":
          description: Patient created
        "204":
          description: Patient replaced
        "400":
          description: Invalid input
        "500":
          description: Internal error
    post:
      tags:
        - Episode12
      summary: Set inventory order
      operationId: updatePatient
      parameters:
        - name: id
          in: path
          description: Patient ID
          required: true
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Patient"
        description: InventoryOrder that needs to be added or updated
        required: true
      responses:
        "204":
          description: Patient updated
        "400":
          description: Invalid input
        "404":
          description: Not found
        "500":
          description: Internal error
    delete:
      tags:
        - Episode12
      summary: Delete Patient
      operationId: deletePatient
      parameters:
        - name: id
          in: path
          description: Patient ID to be deleted
          required: true
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Patient deleted
        "400":
          description: "Invalid input"
        "404":
          description: Patient ID does not exists
        "500":
          description: Internal error
  /{teamid}/sciroc-episode12-image:
    get:
      tags:
        - Episode12
      summary: List of image reports
      parameters:
        - name: query
          in: query
          description: Query
          required: false
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ImageReport"
        "400":
          description: "Invalid query"
        "500":
          description: Internal error
  /{teamid}/sciroc-episode12-image/{id}:
    get:
      tags:
        - Episode12
      summary: Gets image
      operationId: getImageReport
      parameters:
        - name: id
          in: path
          description: Image ID
          required: true
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageReport"
        "404":
          description: Not found
        "500":
          description: Internal error
    put:
      tags:
        - Episode12
      summary: Add image report
      operationId: setImageReport
      parameters:
        - name: id
          in: path
          description: Image ID
          required: true
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ImageReport"
        description: ImageReport that needs to be added or updated
        required: true
      responses:
        "201":
          description: ImageReport created
        "204":
          description: ImageReport replaced
        "400":
          description: Invalid input
        "500":
          description: Internal error
    post:
      tags:
        - Episode12
      summary: Update image report
      operationId: updateImageReport
      parameters:
        - name: id
          in: path
          description: Image ID
          required: true
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ImageReport"
        description: ImageReport that needs to be updated
        required: true
      responses:
        "204":
          description: ImageReport updated
        "400":
          description: Invalid input
        "404":
          description: Not found
        "500":
          description: Internal error
    delete:
      tags:
        - Episode12
      summary: Delete ImageReport
      operationId: deleteImageReport
      parameters:
        - name: id
          in: path
          description: ImageReport ID to be deleted
          required: true
          schema:
            type: string
        - name: teamid
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      responses:
        "204":
          description: ImageReport deleted
        "400":
          description: "Invalid input"
        "404":
          description: Not found
        "500":
          description: Internal error
externalDocs:
  description: Find out more about the SciRoc competition
  url: http://sciroc.org/datahub
servers:
  - url: https://api.pp.mksmart.org/sciroc-competition/
security:
  - scirocAuth: []
components:
  securitySchemes:
    scirocAuth:     
      type: http
      scheme: basic
  schemas:
    Team:
      type: object
      required:
        - "@id"
        - "@type"
        - label
      properties:
        "@id":
          type: string
        "@type":
          type: string
          enum:
            - Team
        label:
          type: string
        description:
          type: string
    Episode:
      type: object
      required:
        - "@id"
        - "@type"
        - label
        - status
      properties:
        "@id":
          type: string
        "@type":
          type: string
          enum:
            - Episode
        label:
          type: string
        description:
          type: string
        status:
          type: string
          default: inactive
          enum:
            - inactive
            - active
    Event:
      type: object
      required:
        - "@id"
        - "@type"
        - label
        - start-time
        - end-time
      properties:
        "@id":
          type: string
        "@type":
          type: string
          enum:
            - Event
        label:
          type: string
        description:
          type: string
        location:
          type: string
          enum:
            - location1
            - location2
            - location3
            - location4
            - location5
        start-time:
          type: string
          format: date-time
        end-time:
          type: string
          format: date-time
        episode:
          type: string
    Trial:
      type: object
      required:
        - "@id"
        - "@type"
        - team
        - episode
        - start-time
        - end-time
        - duration
        - achievements
        - penalties
      properties:
        "@id":
          type: string
        "@type":
          type: string
          enum:
            - Trial
        team:
          type: string
        episode:
          type: string
        start-time:
          type: string
          format: date-time
          description: Trial start time
        end-time:
          type: string
          format: date-time
          description: Trial expected end time
        duration:
          type: number
          description: Actual trial duration in seconds
        achievements:
          type: number
        penalties:
          type: number
        score:
          type: number
    Judgement:
      type: object
      required:
        - "@id"
        - "@type"
        - team
        - episode
        - score
      properties:
        "@id":
          type: string
        "@type":
          type: string
          enum:
            - Judgement
        team:
          type: string
        episode:
          type: string
        score:
          type: number
    RobotStatus:
      type: object
      required:
        - "@id"
        - "@type"
        - message
        - team
        - episode
        - timestamp
        - x
        - y
        - z
      properties:
        "@id":
          type: string
        "@type":
          type: string
          enum:
            - RobotStatus
        message:
          type: string
          maxLength: 30
        episode:
          type: string
        team:
          type: string
        timestamp:
          type: string
          format: date-time
        x:
          type: number
        y:
          type: number
        z:
          type: number
    RobotLocation:
      type: object
      required:
        - "@id"
        - "@type"
        - team
        - episode
        - timestamp
        - location
      properties:
        "@id":
          type: string
        "@type":
          type: string
          enum:
            - RobotLocation
        episode:
          type: string
        team:
          type: string
        timestamp:
          type: string
          format: date-time
        x:
          type: number
        y:
          type: number
        z:
          type: number
    Menu:
      type: object
      required:
        - "@id"
        - "@type"
      properties:
        "@id":
          type: string
        "@type":
          type: string
          enum:
            - Menu
        products:
          type: array
          minItems: 2
          items:
            $ref: "#/components/schemas/Product"
    Table:
      type: object
      required:
        - "@id"
        - "@type"
        - customers
        - status
      properties:
        "@id":
          type: string
        "@type":
          type: string
          enum:
            - Table
        customers:
          type: number
        status:
          type: string
          enum:
            - Needs serving
            - Already served
            - Needs cleaning
            - Ready
    Product:
      type: object
      required:
        - "@id"
        - "@type"
        - label
        - price
      properties:
        "@id":
          type: string
        "@type":
          type: string
          enum:
            - Product
        label:
          type: string
        descriptions:
          type: string
        price:
          type: string
    Order:
      type: object
      required:
        - "@id"
        - "@type"
        - table
        - products
        - status
        - timestamp
      properties:
        "@id":
          type: string
        "@type":
          type: string
          enum:
            - Order
        table:
          type: string
        timestamp:
          type: string
          format: date-time
        products:
          type: array
          minItems: 1
          items:
            type: string
#            $ref: "#/components/schemas/ProductVariant"
        status:
          type: string
          enum:
            - Pending
            - Complete
    Shop:
      type: object
      required:
      - "@id"
      - "@type"
      - floor
      - goal
      properties:
        "@id":
          type: string
        "@type":
          type: string
          enum:
          - Shop
        floor:
          type: number
        description:
          type: string
        goal:
          type: boolean
          description: Indicates whether this shop is the current target destination
    InventoryItem:
      type: object
      required:
      - "@id"
      - "@type"
      - label
      - description
      - shelf
      - slot
      - quantity
      - timestamp
      properties:
        "@id":
          type: string
        "@type":
          type: string
          enum:
          - InventoryItem
        label:
          type: string
        description:
          type: string
        shelf:
          type: string
        slot:
          type: string
        quantity:
          type: number
        timestamp:
          type: string
          format: date-time
    InventoryOrder:
      type: object
      required:
      - "@id"
      - "@type"
      - items
      - timestamp
      - status
      properties:
        "@id":
          type: string
        "@type":
          type: string
          enum:
          - InventoryOrder
        timestamp:
          type: string
          format: date-time
        items:
          type: array
          minItems: 1
          items:
            $ref: "#/components/schemas/InventoryItemOrder"
        status:
          type: string
          enum:
            - Pending
            - Complete
    InventoryItemOrder:
      type: object
      required:
      - inventory-item-id
      - quantity
      properties:
        inventory-item-id:
          type: string
        quantity:
          type: number
    Patient:
      type: object
      required:
      - "@id"
      - "@type"
      - x
      - y
      - z
      properties:
        "@id":
          type: string
        "@type":
          type: string
          enum:
          - Patient
        x:
          type: number
        y:
          type: number
        z:
          type: number
    ImageReport:
      type: object
      required:
      - "@id"
      - "@type"
      - team
      - timestamp
      - x
      - y
      - z
      - base64
      - format
      properties:
        "@id":
          type: string
        "@type":
          type: string
          enum:
          - ImageReport
        team:
          type: string
        timestamp:
          type: string
          format: date-time
        x:
          type: number
        y:
          type: number
        z:
          type: number
        base64:
          type: string
        format:
          type: string
          enum:
          - image/jpeg
          - image/png
          - image/bmp
      
